To document: embedding matrix
=============================

workflow style embeds workflow style: yes, with a special API (stdlib.map)
workflow style embeds Python style: yes
workflow style embeds cmd style: 
        for pure bash: yes, but requires work (canonical interface for federation). 
        for nested invocation (scripts containing /bin/seamless commands): see "cmd style embeds cmd style".
Python style embeds workflow style: yes, with a special API
Python style embeds Python style: yes
Python style embeds cmd style: no
cmd style embeds workflow style: no
cmd style embeds Python style: no
cmd style embeds cmd style: to be implemented?

=============================

TODO before 0.12 release: 

- Add singularity support for bashdocker jobs. DONE

- Fix https://github.com/sjdv1982/seamless/issues/246 (both issues). DONE

- Add local fairserver test. Rip the RPBS fairserver, create add_fairserver API. Adapt reproducible PDB viewer and deepcell-pdb / deepfolder-pdb. DONE

- Add bufferdir-deploy-deepfolder tool (checksum => ./deployed/<folder>, either hardlinks or softlinks into bufferdir). DONE.

- Make sure that bash jobs with a buffer read folder have get_filename working directory. Rip filezones. Use bufferdir_deploy_deepfolder, then test get_directory feature. Test with /bin/seamless as well! DONE.

- Make sure that save_vault respects scratch (i.e. make it behave the same as buffer_remote.write). Also for save_zip. DONE


- Clean up seamless-tools/database-* tools: DONE

- revive database-run-actions. DONE.

- Re-run pin-filesystem.sh tests. DONE

- Make sure the examples can function without RPBS buffer server, or add it in the notebook. DONE

- Document the vault + database path as a valid (advanced-use) setup. Rip the warning in init_database_from_env, refactor/document API. DONE

- Overhaul serve-graph by adding delegation. Test load-vault/add-zip as well. Run tests/examples requiring serve-graph. DONE

- Re-review new-project. Read some settings from a project.yaml... TODO (delegation!). Always assume (verify?) Docker availability. Have an IPython-or-Jupyter mode config var. Perhaps have a load-project.bash as well? TODO.
    
======================

- Clean up and re-run all tests.
    * low-level (DONE)
    * fairserver (DONE)
    * cmd (TODO)
    * high-level (TODO)

- Make sure to add the correct scripts and wrappers from /seamless/bin and /seamless-tools/utils into the Docker images (rpbs/seamless and seamless-devel). Currently, /seamless-tools/utils is not mounted at all, therefore seamless-upload fails. /seamless-tools/seamless-cli/seamless-upload-vault also doesn't seem to work. As tests, run /lowlevel/pin-filesystem.sh, /highlevel/pin-filesystem.sh, /highlevel/get-file-and-directory.sh, /cmd/highlevel/get-file-and-directory.sh

- Documentation. 

- Document: buffer read servers/folders fail silently, the buffer write server must succeed

- General documentation, describing the three styles. Old TODO entries have been added to the Seamless Documentation issue.

- For seamless-cli, when distributing, be sure to add hashserver to the cli directory. No deps since they are inside the Dockerfile.


- Make a separate conda package for bin/seamless. 
Add seamless-upload, seamless-upload-zip, seamless-upload-vault and seamless-download as copies of seamless-tools/scripts/upload.py etc.,
rather than the Docker wrappers of seamless-cli/seamless-upload etc.

- Maintain two Conda environment files: one for delegated use (seamless-delegated), one with full functionality (seamless-full?)
Currently, there is only seamless-delegated-development.yaml, base the others
(seamless-delegated, seamless-full) off this.
In all of them, *also* install seamless-cli so that tools and seamless Docker container can be fired up at will. *Mark all Conda environments with
SEAMLESS_CONDA_ENVIRONMENT=1*, this is so that seamless-bash will work from within the Conda environment.

- Port run-db-hashserver-devel to non-devel environment for distribution.

- Document the various packages/installation methods.
    * The Conda environments (full and delegated) will have co-equal status
    with the- Seamless Docker image
    * Note that even the Conda environments still require Docker to make delegation work. Mini and micro assistants require Seamless Docker image as well.
    If you don't have Docker, either use no delegation (bad!), or set it up via HPC/Dask-oriented tools (run-db-hashserver.sh + dask-deployment tools). The latter option is advanced use case. Document delegation and why!

======================

- After release: fix cloudless, rip communion-related parameters, always invoke delegation.
