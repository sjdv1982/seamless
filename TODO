Random things TODO regarding integration:

- Rip the entire communion protocol, too much trouble with websockets,
  threads and event loops and imperative mode.
  Make a seamless-micro-assistant that needs a database and a buffer read/write server.
  Use aiohttp requests to contact the assistant.
  
  Check a nested/fingertip issue where imperative-delegated works if you restart the micro-assistant.py
  (after cleaning up database and buffer directory) but not otherwise. 
  UPDATE: happens even for simple functions in imperative-database if you delete buffers but not database
  UPDATE2: the simple problem has been fixed, but it still hangs sometimes for nested... restart micro-assistant regularly?
  Should happen so often since new jobs are normally sent to a different micro-assistant
  UPDATE3: all fixed now.

  ***DONE up to here***

  - Pimp the protocol a bit so that "peer ID" (project information) is sent along in the request
  After that, support transformation meta (see old jobless), progress/prelim, logs, hardcancel, etc.
  Some kind of response-and-make-a-new-request? We really don't want websockets... UPDATE: use repeated PUTs instead
  In general, assistant protocol cannot deal with streaming logs/results, would be nice if it could. 
  UPDATE: Make a mini-assistant that has meta but also env arguments. 
  ***Dogma: env (recipe) != Transformation.__env__ (schema) !!!***
  In addition, implement "contest" API for mini-assistant (tests/highlevel/contest.py can't work without).

  Finally, rename imperative-communion and split it into a re-entrant version 
  (local=False, currently commented out), and the all-local version.
  micro-assistant.py can't deal with re-entrant delegation. Start a jobless successor.
- Make sure that bash jobs with a buffer read folder have get_filename/get_directory working directory. Rip filezones.
- Run tests/examples requiring serve-graph, add seamless.config.delegate if needed
- Make sure that buffer_cache eviction works correctly in the light of buffer_remote known buffers, is_readable, etc.
  Support dynamic modification of the delegate config, poll the assistant regularly for this.
  Make a test that shows the memory savings of delegation, e.g. deep cell with many 50MB members, (disable lru cache? like --no-lru in serve-graph?)
- For seamless-cli, when distributing, be sure to add hashserver to the cli directory. No deps since they are inside the Dockerfile.
- Make sure the examples can function without RPBS buffer server, or add it in the notebook
- Re-review new-project, add delegation? UPDATE: read it from a project.yaml...
- Clean up seamless-tools database tools and revise database-run-actions
- Document: buffer read servers/folders fail silently, the buffer write server must succeed