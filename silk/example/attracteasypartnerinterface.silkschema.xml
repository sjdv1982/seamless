<?xml version='1.0' encoding='UTF-8'?>
<silkspace>
<silk typename="HaddockResidueList">
  <base>IntegerArray</base>
  <docstring>List of residues for HADDOCK</docstring>
  <methodblock>
    def _validate(self):
        for v in range(len(self)):
            try:
                 Integer(self[v])
            except:
                 raise ValueError("Invalid residue number '%s'. Please specify your residues as comma-separated numbers, e.g. 1,2,3." % self[v])
        IntegerArray._validate__(self)
    def _parse(self, s):
        return silk.parse(s, IntegerArray)
    def __repr__(self, *args, **kargs):
        return "'" + self.__str__(*args, **kargs) + "'"
    def __str__(self, *args, **kargs):
        return ",".join([str(v) for v in self])
    def __print__(self, *args, **kargs):
        return self.__repr__(*args,**kargs)
    def __eq__(self, other):
        if isinstance(other, str):
            return other == str(self)
        return IntegerArray.__eq__(self, other)
  </methodblock>
</silk>
<silk typename="Data_PDB">
<base>Data</base>
  <formblock>
    self.data_format = "Protein Data Bank (PDB) format"
    self.file_extensions = [".pdb"]
  </formblock>
</silk>
<silk typename="Data_CNS_Restraints">
<base>Data</base>
  <formblock>
    self.data_format = "CNS restraints format"
    self.file_extensions = [".tbl"]
  </formblock>
</silk>
<silk typename="HaddockRestraintsInterface">
  <docstring>
    Definition of HADDOCK Ambiguous Interaction Restraints (AIRs)
    Lists of active and passive residues must be provided
  </docstring>
  <formblock>activereslist.add_header("Please supply residues as comma-separated lists of residue numbers")</formblock>
  <formblock>activereslist.name = "Active residues (directly involved in the interaction)"</formblock>
  <formblock>passivereslist.name = "Passive residues (surrounding surface residues)"</formblock>
  <formblock>auto_passive.name = "Define passive residues automatically around the active residues"</formblock>
  <formblock>activereslist.type = "text"</formblock>
  <formblock>passivereslist.type = "text"</formblock>
  <member>
    <name>activereslist</name>
    <type>HaddockResidueList</type>
    <init>[]</init>
  </member>
  <member>
    <name>passivereslist</name>
    <type>HaddockResidueList</type>
    <init>[]</init>
  </member>
  <member>
    <name>auto_passive</name>
    <type>Bool</type>
    <init>False</init>
  </member>
  <validationblock>
    assert not (auto_passive and len(passivereslist))
  </validationblock>
  <errorblock>
    <error>
    <code>
      assert not (auto_passive and len(passivereslist))
    </code>
    <message>
      You manually defined passive residues, but also that they should be determined automatically
    </message>
    </error>
  </errorblock>
</silk>
<silk typename="AttractEasyPartnerInterface">
  <formblock>pdbfile.type = "file"</formblock>
  <formblock>pdbfile.name = "Structure file"</formblock>
  <member>
    <name>pdbfile</name>
    <type>ResourceData_PDB</type>
  </member>
  <member>
    <name>moleculetype</name>
    <type>String</type>
    <init>"Protein"</init>    
    <enum>"Protein", "Peptide","DNA", "RNA"</enum>
  </member>
  <formblock>moleculetype.name = "What kind of molecule are you docking?"</formblock>
  <member>
    <name>has_hydrogens</name>
    <type>Bool</type>
    <init>False</init>
  </member>
  <formblock>has_hydrogens.name = "The PDB file contains all necessary atoms, including polar hydrogens"</formblock>
  <member optional="1">
    <name>haddock_restraints</name>
    <type>HaddockRestraintsInterface</type>
  </member>
  <formblock>haddock_restraints.name = "Definition of residues for HADDOCK-type distance restraints (optional)"</formblock>
  <formblock>haddock_restraints.auto_passive.type = None #TODO: disabled for now</formblock>
  <member>
    <name>ensemble_size</name>
    <type>Integer</type>
    <init>0</init>
  </member>
  <formblock>ensemble_size.name = "If the PDB is a multi-model ensemble, specify the number of conformers"</formblock>
  <validationblock>if ensemble_size != 0: assert ensemble_size &gt;= 1</validationblock>
  <member>
    <name>generate_modes</name>
    <type>Bool</type>
    <init>False</init>
  </member>
  <member>
    <name>nr_modes</name>
    <type>Integer</type>
    <init>5</init>
  </member>
  <formblock>
    use_rmsd.name = "Perform RMSD analysis"
    generate_modes.name = "Generate harmonic modes"
    nr_modes.name = "Number of harmonic modes to select"
    nr_modes.type = "option"
    nr_modes.options = list(range(0,10+1))
    nr_modes.optiontitles = ["No modes"] + [str(v) for v in nr_modes.options[1:]]
  </formblock>
  <validationblock>if generate_modes: assert nr_modes &gt;= 1 and nr_modes &lt;= 10</validationblock>
  <member>
    <name>use_rmsd</name>
    <type>Bool</type>
    <init>False</init>
  </member>
  <member optional="1">
    <name>rmsd_pdb</name>
    <type>ResourceData_PDB</type>
  </member>
  <formblock>rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")</formblock>
  <formblock>rmsd_pdb.name = "RMSD PDB file"</formblock>
  <formblock>rmsd_pdb.type = "file"</formblock>
  <validationblock>
    if ensemble_size &gt; 1: assert generate_modes == False
    if not use_rmsd:
      assert rmsd_pdb is None
    else:
      assert rmsd_pdb is not None
  </validationblock>
  <errorblock>
    <error>
    <code>
      if ensemble_size != 0: assert ensemble_size &gt;= 1
    </code>
    <message>
      If you define an ensemble size, it must at least 1, not {ensemble_size}
    </message>
  </error>
  <error>
    <code>
      assert rmsd_pdb is None
    </code>
    <message>
      You defined a PDB for RMSD calculation, which you disabled
    </message>
  </error>
  <error>
    <code>
      if generate_modes: assert nr_modes &gt;= 1 and nr_modes &lt;= 10
    </code>
    <message>
      Number of harmonic modes must be between 1 and 10
    </message>
  </error>
  <error>
    <code>
      assert rmsd_pdb is not None
    </code>
    <message>
      You need to define a PDB for RMSD calculation, or disable it
    </message>
  </error>
  <error>
    <code>
      if ensemble_size &gt; 1: assert generate_modes == False
    </code>
    <message>
      You can upload an ensemble of conformations, or generate harmonic modes, but not both
    </message>
  </error>
  </errorblock>
</silk>
</silkspace>
