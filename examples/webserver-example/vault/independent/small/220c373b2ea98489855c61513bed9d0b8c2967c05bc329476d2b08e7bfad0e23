{
  "INDEX.jinja.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{title}}</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/buefy/dist/buefy.min.css\">\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css'>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Material+Icons'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.css'>\n    <link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.0.6/css/all.css'>\n    {{HEAD}}\n</head>\n\n<body>\n    {{BODY}}\n    <div id=\"app\">\n        <v-app id=\"vuetify-app\">\n{{COMPONENTS}}\n        </v-app>\n    </div>\n\n    <script src='https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.js'></script>\n    <script src=\"https://unpkg.com/buefy/dist/buefy.min.js\"></script>\n    <script type=\"text/javascript\" src=\"./seamless-client.js\"></script>\n    <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n</html>\n",
  "INDEX.jinja.js": "app_globals = {}\n\n{{ COMPONENT_JS }}\n\nseamless_read_paths = {{ SEAMLESS_READ_PATHS }}\nseamless_write_paths = {{ SEAMLESS_WRITE_PATHS }}\nseamless_auto_read_paths = {{ SEAMLESS_AUTO_READ_PATHS }}\nseamless_path_to_cell = {{ SEAMLESS_PATH_TO_CELL }}\n\nctx = connect_seamless()\nctx.self.onsharelist = function (sharelist) {\n  sharelist.forEach(path0 => {\n    let path = path0.replaceAll(\"/\", \"__\")\n    cell0 = seamless_path_to_cell[path]\n    if (cell0 === undefined) cell0 = path0\n    let cell = cell0.replaceAll(\"/\", \"__\")\n    if (ctx[path].binary) {\n      ctx[path].onchange = function () {\n        content_type = ctx[path].content_type\n        if (content_type === null) content_type = \"\"\n        const v = new Blob([this.value], {type: content_type})\n        vm[cell].value = v\n        vm[cell].checksum = this.checksum\n      }\n    }\n    else if (seamless_read_paths[\"json\"].indexOf(path) >= 0) {\n      ctx[path].onchange = function () {\n        try {\n          const v = JSON.parse(this.value)\n          vm[cell].value = v\n          vm[cell].checksum = this.checksum\n        }\n        catch (error) {\n          console.log(`Cannot parse server value of cell '${cell}' as JSON`)\n        }\n      }\n    }\n    else if (seamless_read_paths[\"text\"].indexOf(path) >= 0) {\n      ctx[path].onchange = function () {\n        vm[cell].value = this.value\n        vm[cell].checksum = this.checksum\n      }\n    }\n\n    if (seamless_auto_read_paths.indexOf(path) >= 0) {\n      ctx[path].auto_read = true\n    }\n  })\n}\nwebctx = connect_seamless(null, null, share_namespace=\"status\")\nwebctx.self.onsharelist = function (sharelist) {\n  vis_status = webctx[\"vis_status\"]\n  if (!(vis_status === undefined)) {\n    vis_status.onchange = function() {      \n      let jstatus = JSON.parse(vis_status.value)\n      cells = {}\n      transformers = {}\n      jstatus.nodes.forEach(node => {\n        if (node.type == \"cell\") {\n          cells[node.name] = node\n        }\n        else if (node.type == \"transformer\") {\n          transformers[node.name] = node\n        }\n      })\n      jstatus.cells = cells\n      jstatus.transformers = transformers\n      vm[\"STATUS\"].value = jstatus\n      vm[\"STATUS\"].checksum = vis_status.checksum\n    }\n  }\n}  \n\nfunction seamless_update(path, value, encoding) {\n  if (!ctx) return\n  if (!ctx.self.sharelist) return\n  if (ctx.self.sharelist.indexOf(path) < 0) return\n  if (ctx[path].binary) {\n    ctx[path].set(value)\n  }\n  else if (encoding == \"json\") {\n    ctx[path].set(JSON.stringify(value))\n  }\n  else if (encoding == \"text\") {\n    ctx[path].set(value)\n  }\n}\n\n\nconst app = new Vue({\n  vuetify: new Vuetify(),\n  data() {\n    return {\n      ...{{ VUE_DATA }}, \n      ...{\n        \"STATUS\": {\n          \"checksum\": null,\n          \"value\": {}\n        }\n      }\n    }\n  },\n  methods: {\n    METHOD_get_app_globals() {\n      return app_globals\n    },\n    METHOD_file_upload(cellname, file) { \n      if (file === undefined) return\n      that = this\n      file.arrayBuffer().then(function(buf){\n        that[cellname].value = new Blob([new Uint8Array(buf)], {type: file.type })\n      })  \n    }\n    \n  },\n  watch: {\n    {{WATCHERS}}\n  },\n  updated() {\n{{INIT_CODE}}\n  }\n})\n\nvm = app.$mount('#app')\n\n",
  "bigselect.README.txt": "Creates an autocomplete selector that selects an item from a big list of options.\n\nThis web component is meant to be created using the bigselect webunit API \n(seamless.highlevel.webunits.bigselect). See the help of that function to learn\nthe various arguments and their meanings. ",
  "bigselect.jinja.html": "<section>\n    <p class=\"content\"><b>{{selected_title}}</b> {{ selected }}</p>\n    <b-field label=\"{{title}}\">\n        <b-autocomplete\n            rounded\n            v-model=\"{{CELLS.input}}.value\"\n            :data=\"{{CELLS.input}}.value ? {{CELLS.options}}.value.filter(option => option.toString().toLowerCase().indexOf({{CELLS.input}}.value.toString().toLowerCase()) == 0) : {{CELLS.options}}.value\"\n            placeholder=\"{{placeholder}}\"\n            icon=\"magnify\"\n            clearable\n            @select=\"option => {if (option) { {{CELLS.selected}}.value = option; {{CELLS.input}}.value = option } }\">\n            <template #empty>No results found</template>\n        </b-autocomplete>\n    </b-field>\n</section>",
  "card.README.txt": "Text area, cannot be edited.\n\nParameters:\n- title (string).\n",
  "card.jinja.html": "            <section>\n\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            {{title}}\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\" style=\"overflow: auto; height: 400px;\">\n                            <pre>{{ '{{' }} {{CELL}}.value {{ '}}' }}</pre>\n                        </div>\n                    </div>\n                </b-collapse>\n\n            </section>\n",
  "checkbox.README.txt": "Checkbox\n\nParameters:\n- title (string).\n- editable (bool). If true, the checkbox is editable\n\n",
  "checkbox.jinja.html": "            <b-field label=\"{{title}}\">\n                <b-checkbox\n                    v-bind:value=\"{{CELL}}.value\"\n                    v-model=\"{{CELL}}.value\"\n                    :editable=\"{% if editable %}true{% else %}false{% endif %}\"\n                />\n            </b-field>\n\n",
  "datatable.README.txt": "Data table (Vuetify) to visualize a plain cell.\n\nThe visualized cell must contain a dict with the following keys:\n\n\"headers\": a description of the data columns, as a list-of-dicts.\nSee https://vuetifyjs.com/en/api/v-data-table/#headers\n for a description of an individual dict (DataTableHeader)\nExample: [{\"value\": \"a\", \"text\": \"Field A\"}, {\"value\": \"b\", \"text\": \"Field B\"}]\n\n\"items\": the data to display, as a list-of-dicts.\nEach dict must contain a key corresponding to \"value\"\n in one of the header dicts.\nExample: [{\"a\": 1, \"b\": \"one\"}, {\"a\": 2, \"b\": \"two\"}]\n\nParameters:\n- title (string).\n",
  "datatable.jinja.html": "            <section>\n                <b-field label=\"{{title}}\">\n                <v-data-table\n                  :headers=\"{{CELL}}.value.headers\"\n                  :items=\"{{CELL}}.value.items\"\n\n                  class=\"elevation-1\"\n                >\n                  <template v-slot:item=\"{ item }\">\n                    <tr>\n                        <td v-for=\"header in {{CELL}}.value.headers\">\n                          {{ '{{' }} item[header.value] {{ '}}' }}\n                        </td>\n                    </tr>\n                  </template>\n                </v-data-table>\n                </b-field>\n              </section>\n",
  "fileupload.README.txt": "File upload area\n\nParameters:\n- title (string).\n",
  "fileupload.jinja.html": "        <section>\n            <b-field label=\"{{title}}\">                    \n            </b-field>\n            <b-field class=\"file is-primary\" :class=\"{'has-name': !!{{CELL}}.file}\">\n                <b-upload \n                    v-model=\"{{CELL}}.file\" \n                    class=\"file-label\"\n                >\n                    <span class=\"file-cta\">\n                        <b-icon class=\"file-icon\" icon=\"upload\"></b-icon>\n                        <span class=\"file-label\">Click to upload</span>\n                    </span>\n                    <span class=\"file-name\" v-if=\"{{CELL}}.file\">\n                        {{ '{{' }} {{CELL}}.file.name {{ '}}' }}\n                    </span>\n                </b-upload>\n            </b-field>\n        </section>\n",
  "fileupload.json": "{\n    \"file\": true\n}\n",
  "html.README.txt": "Field to display a HTML cell\n\nParameters:\n- title (string).\n",
  "html.jinja.html": "            <b-field label=\"{{title}}\">\n                <div v-html=\"{{CELL}}.value\"></div>\n            </b-field>\n",
  "iframe.README.txt": "Field to display a HTML cell using an iframe\n\nParameters:\n- title (string).\n- height (CSS unit string)\n",
  "iframe.jinja.html": "            <b-field label=\"{{title}}\">\n                <iframe src=\"../ctx/{{CELL}}\" width=100% height={{height}} :key=\"'{{ID1}}' + {{CELL}}.checksum\"></iframe>\n            </b-field>\n",
  "image.README.txt": "Field to display an image\nThis will only work for binary cells, because those are stored as Blob with the correct mimetype\n\nParameters:\n- title (string).\n- width (CSS unit string)\n- height (CSS unit string)\n",
  "image.jinja.html": "            <b-field label=\"{{title}}\">                \n                <img :src=\"{{CELL}}.value ? METHOD_get_app_globals().createObjectURL({{CELL}}.value) : ''\" width={{width}} height={{height}}></img>\n            </b-field>\n",
  "image.js": "app_globals.createObjectURL = URL.createObjectURL\n",
  "input.README.txt": "Input for strings\n\nParameters:\n- title (string).\n- editable (bool). If true, the number input is editable\n",
  "input.jinja.html": "            <b-field label=\"{{title}}\">\n                <b-input\n                    v-bind:value=\"{{CELL}}.value\"\n                    v-model=\"{{CELL}}.value\"\n                    :editable=\"{% if editable %}true{% else %}false{% endif %}\"\n                />\n            </b-field>\n",
  "nglviewer.BODY.html": "<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/arose/ngl/v2.0.0-dev.32/dist/ngl.js\"></script>",
  "nglviewer.README.txt": "Creates an NGL viewer for molecular structures.\nSee https://nglviewer.org/ for more info on NGL.\n\nThis web component is meant to be created using the nglviewer webunit API \n(seamless.highlevel.webunits.nglviewer). See the help of that function to learn\nthe various arguments and their meanings. ",
  "nglviewer.jinja.html": "                <section>\n                <p class=\"card-header-title\"></p>\n                {{title}}\n                </p>\n                <div id=\"{{ID}}\" style=\"width:{{viewer_width}}; height:{{viewer_height}};\"></div>\n                </section>\n                <!--\n                <section>\n\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            Representation\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\" style=\"overflow: auto; height: 401px;\">\n                            <pre>{{ '{{' }} {{CELLS.representation}}.value {{ '}}' }}</pre>\n                        </div>\n                    </div>\n                </b-collapse>\n                \n            </section>\n            <section v-for=\"(value, mol) in {{CELLS.structures}}.value\">\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID2}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            {{ '{{ mol }}' }}\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\" style=\"overflow: auto; height: 400px;\">\n                            <pre>{{ '{{ value }}' }}</pre>\n                        </div>\n                    </div>\n                </b-collapse>\n            </section>\n            -->",
  "nglviewer.js": "ngl_stages = {}\n\nfunction load_ngl(stage_id, pdbs, representations, format){\n    if (Object.keys(pdbs).length === 0) return;\n\n    var stage = ngl_stages[stage_id]\n    if (typeof stage === 'null' || typeof stage === 'undefined'){\n        var stage = new NGL.Stage(stage_id)\n        ngl_stages[stage_id] = stage\n    }\n    stage.removeAllComponents()\n    var pdbs2 = pdbs\n    if (typeof pdbs === \"string\") {\n        var pdbs2 = {\"DEFAULT\": pdbs}\n    }\n    Object.keys(pdbs2).forEach(function(item){\n        let pdb = new Blob([pdbs2[item]], {type : 'text/plain'})\n        let ext = item.slice((item.lastIndexOf(\".\") - 1 >>> 0) + 2);\n        if (ext == \"\") ext = format;\n        stage.loadFile(pdb, { ext: ext } ).then(function (o) {            \n            let curr_representations = representations[item]\n            if (curr_representations === null || curr_representations === undefined) curr_representations = representations[\"DEFAULT\"]\n            if (curr_representations === null || curr_representations === undefined) return\n            if (!Array.isArray(curr_representations)) curr_representations = [curr_representations]\n            Object.keys(curr_representations).forEach(function(repnr){\n                let rep = curr_representations[repnr]\n                o.addRepresentation(rep[\"type\"], {...rep[\"params\"]})\n            })\n            o.autoView();\n        })        \n    })\n}\n",
  "nglviewer.watch.jinja": "\"{{ID}}\", {{CELLS.structures}}.value, {{CELLS.representation}}.value, \"{{format}}\" => load_ngl",
  "numberinput.README.txt": "Number input for integers.\n\nParameters:\n- title (string).\n- editable (bool). If true, the number input is editable\n",
  "numberinput.jinja.html": "            <b-field label=\"{{title}}\">\n                <b-numberinput\n                    v-bind:value=\"{{CELL}}.value\"\n                    v-model=\"{{CELL}}.value\"\n                    :editable=\"{% if editable %}true{% else %}false{% endif %}\"\n                />\n            </b-field>\n",
  "select.README.txt": "Drop-down select for multiple-choice values\n\nParameters:\n- title (string).\n- options: a list of dicts\n  Each option dict must contain two items:\n  - value (string): the cell value associated with that option\n  - text (string): the text of the option in the drop-down menu\n\nExample cell, called \"opt\":\n    \"opt\": {\n      \"celltype\": \"str\",\n      \"component\": \"select\",\n      \"params\": {\n        \"auto_read\": true,\n        \"options\": [\n          {\n            \"text\": \"Option 1\",\n            \"value\": \"opt1\"\n          },\n          {\n            \"text\": \"Option 2\",\n            \"value\": \"opt2\"\n          }\n        ],\n        \"title\": \"Cell Opt\"\n      },\n      \"share\": {\n        \"encoding\": \"json\",\n        \"read\": true,\n        \"write\": true\n      }\n    },\n",
  "select.jinja.html": "<section>\n    <b-field label=\"{{title}}\">\n        <b-select placeholder=\"{{placeholder}}\" v-model=\"{{CELL}}.value\">\n            <option\n                v-for=\"option in {{options}}\"\n                :value=\"option.value\"\n                :key=\"option.value\">\n                {{ '{{' }} option.text {{ '}}' }}\n            </option>\n        </b-select>\n    </b-field>\n",
  "slider.README.txt": "Slider for integers and floats\n\nParameters:\n- title (string).\n- min (float). Minimum value.\n- max (float). Maximum value.\n",
  "slider.jinja.html": "            <section>\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            {{title}}\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\">\n                            <b-field grouped>\n                                <b-input :value=\"{{CELL}}.value\" v-model.number=\"{{CELL}}.value\" type=\"number\"></b-input>\n                            </b-field>\n                            <b-field>\n                                <b-slider :value=\"{{CELL}}.value\" v-model=\"{{CELL}}.value\" :min=\"{{min}}\" :max=\"{{max}}\" lazy></b-slider>\n                            </b-field>\n                        </div>\n                    </div>\n                </b-collapse>\n\n            </section>\n",
  "transformer-status.jinja.html": "        <section v-if=\"STATUS.value.transformers\">\n            <b-field label=\"{{title}}\">>                 \n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'royalblue'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-info\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'forestgreen'\"\n                pack=\"fas\"\n                icon=\"sync-alt\"\n                size=\"is-large\"\n                custom-class=\"fa-spin\"\n                type=\"is-success\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'yellow'\"\n                pack=\"fa\"\n                icon=\"sync-alt\"\n                size=\"is-large\"\n                custom-class=\"fa-spin\"\n                type=\"is-warning\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'orange'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-danger\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'red'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-danger\">\n            </b-icon>\n            </b-field>\n            <b-collapse class=\"card\" :open=\"false\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                <div\n                    v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.status\"\n                    slot=\"trigger\"\n                    slot-scope=\"props\"\n                    class=\"card-header\"\n                    role=\"button\"\n                    aria-controls=\"{{ID1}}\">\n                    <p class=\"card-header-title\">\n                        Error message\n                    </p>\n                    <a class=\"card-header-icon\">\n                        <b-icon\n                            :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                        </b-icon>\n                    </a>\n                </div>\n                <div class=\"card-content\" v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.status\">\n                    <div class=\"content\" style=\"overflow: auto; height: 400px;\">\n                        <pre>{{ '{{' }} STATUS.value.transformers.{{TRANSFORMER}}.status {{ '}}' }}</pre>\n                    </div>\n                </div>\n            </b-collapse>\n\n        </section>\n"
}
