"""Creates index.html and index.js from a webform generated by seamless2webform.py

Does not normally need to be modified

JSON parameters for components:

- file

If True, for every cell "c" that has this component, 
add a property "c_FILENAME" to the Vue model
(in addition to Vue property "c", which is always added).

This property is watched, and when it is changed,
property "c" is updated with the file value (File.text()), 
using the file_upload method on the Vue app

"""

# inputs:
# - webform
# - components
# - seed

import os
from jinja2 import Template
import random
import json

idents = set()
def ident():
    while 1:
        result = "id-%d" % random.randint(1,10000)
        if result not in idents:
            idents.add(result)
            return result

encodings = ["text", "json"]
defaults = {
    "int": 0,
    "float": 0.0,
    "str": "",
    "plain": {},
    "text": "",
    "bool": False,
    "bytes": None,
}

# Rewrite the webform, modifying the names of cells/transformers
#  by replacing "/" with "__".
# This is necessary to avoid problems with Vue.

for dic in (webform["cells"], webform["transformers"]):
    for name in list(dic.keys()):
        if name.find("/") > -1:
            v = dic.pop(name)
            name2 = name.replace("/", "__")
            dic[name2] = v
for comp in webform["extra_components"]:
    comp["cell"] = comp["cell"].replace("/", "__")
    
# / rewrite

result = {}

random.seed(seed)
COMPONENT_JS = ""
COMPONENTS = ""
WATCHERS = ""
SEAMLESS_READ_CELLS = {k:[] for k in encodings}
SEAMLESS_WRITE_CELLS = {k:[] for k in encodings}
SEAMLESS_AUTO_READ_CELLS = []
VUE_DATA = {}

extra_components = {}

order = webform.get("order", [])
for cell in webform["cells"]:
    if cell not in order:
        order.append(cell)
for tf in webform["transformers"]:
    if tf not in order:
        order.append(tf)

for extra_component in webform.get("extra_components", []):
    id = extra_component.get("id", None)
    if id is None:
        raise ValueError("All extra components must have a field 'id'")
    if id in webform["cells"]:
        raise ValueError("Extra component cannot have id '{}': cell with that name already exists".format(id))
    cell = extra_component.get("cell", None)
    if cell not in webform["cells"]:
        raise ValueError("Extra component cannot have cell '{}': no cell with that name exists".format(cell))
    extra_components[id] = extra_component
    if id not in order:
        order.append(id)

used_components = set()
has_file = []

for cell_or_tf_or_id in order:
    if cell_or_tf_or_id in extra_components:
        id = cell_or_tf_or_id
        extra_component = extra_components[id]
        if "component" not in extra_component:
            continue
        component = extra_component["component"]
        if component == "":
            continue
        cell = extra_component["cell"]
        par = extra_component.get("params",{}).copy()
        for n in range(10):
            par["ID%d" % (n+1)] = ident()
        par["CELL"] = cell

        component_template = components[component + ".jinja.html"]
        template = Template(component_template)
        html = template.render(**par)
        COMPONENTS += html + "\n"

        used_components.add(component)        

        component_params = components.get(component + ".json")
        if component_params is not None:
            component_params = json.loads(component_params)
            if component_params.get("file"):
                if cell not in has_file:
                    has_file.append(cell)
        continue
    elif cell_or_tf_or_id in webform["transformers"]:
        tf = cell_or_tf_or_id
        transformer = webform["transformers"][tf]
        component = transformer["component"]
        if component == "":
            continue
        par = transformer.get("params",{}).copy()
        for n in range(10):
            par["ID%d" % (n+1)] = ident()
        par["TRANSFORMER"] = tf

        component_template = components[component + ".jinja.html"]
        template = Template(component_template)
        html = template.render(**par)
        COMPONENTS += html + "\n"

        used_components.add(component)        
        continue

    cell = cell_or_tf_or_id 
    config = webform["cells"][cell]
    default = defaults[config["celltype"]]
    VUE_DATA[cell] = {
        "checksum": None,
        "value": default
    }
    if "share" in config:
        par = config["share"]
        encoding = par["encoding"]
        if par.get("auto_read"):
            SEAMLESS_AUTO_READ_CELLS.append(cell)
        if par.get("read"):
            SEAMLESS_READ_CELLS[encoding].append(cell)
        if par.get("write"):
            SEAMLESS_WRITE_CELLS[encoding].append(cell)
            code = """"{cell}.value": function (value) {{
      seamless_update("{cell}", value, "{encoding}")
    }},""".format(cell=cell, encoding=encoding)
            WATCHERS += code + "\n    "
    if "component" not in config:
        continue
    component = config["component"]
    if component == "":
        continue
    used_components.add(component)
    par = config.get("params",{}).copy()
    for n in range(10):
        par["ID%d" % (n+1)] = ident()
    par["CELL"] = cell

    component_template = components[component + ".jinja.html"]
    template = Template(component_template)
    html = template.render(**par)
    COMPONENTS += html + "\n"
    
    component_params = components.get(component + ".json")
    if component_params is not None:
        component_params = json.loads(component_params)
        if component_params.get("file"):
            if cell not in has_file:
                has_file.append(cell)

for component in used_components:
    component_js = components.get(component + ".js")
    if component_js is not None:
        COMPONENT_JS += component_js + "\n"

for cell in has_file:
    code = """"{cell}.file": function (file) {{
      this.METHOD_file_upload("{cell}", file)
    }},""".format(cell=cell)
    WATCHERS += code + "\n    "

component_template = components["INDEX.jinja.html"]
template = Template(component_template)
par = webform["index"]
index_html = template.render(COMPONENTS=COMPONENTS, **par)
result["index.html"] = index_html

component_template = components["INDEX.jinja.js"]
template = Template(component_template)
index_js = template.render(
    COMPONENT_JS=COMPONENT_JS,
    SEAMLESS_READ_CELLS=json.dumps(SEAMLESS_READ_CELLS, indent=2),
    SEAMLESS_WRITE_CELLS=json.dumps(SEAMLESS_WRITE_CELLS, indent=2),
    SEAMLESS_AUTO_READ_CELLS=json.dumps(SEAMLESS_AUTO_READ_CELLS, indent=2),
    VUE_DATA=json.dumps(VUE_DATA, indent=2).replace("\n", "\n      "),
    WATCHERS=WATCHERS.rstrip()
)
result["index.js"] = index_js
