# In general, run as: i=name_of_test; ./$i.sh > test-outputs/$i.out 2>&1
# Needs delegation to have been set up, unless indicated otherwise
testfolder.sh
testfolder2.sh

undo.sh
    After running, grep "UTC" in undo.out
    It should print two lines, corresponding to dates with a few seconds offset
    If the two lines are identical, something has gone wrong
scratch-fingertip.sh
multi-core-transformations.sh
    The expected result depends on how delegation is set up:
    
    micro-assistant delegation: job 1 fails
    Output: 
    4 seconds have passed
    cat: tf: No such file or directory
    Job 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 4:
    4 seconds have passed
    cat: tf: No such file or directory
    Job 1
    Job 2 2
    (job hangs forever. Might be fixed when Dask will have my patch)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 5:
    8 seconds have passed
    Job 1 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 6:
    4 seconds have passed
    Job 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

future.sh. Expected output is: 
    Waiting for future 'job1.txt.FUTURE' (2 seconds), 
    then waiting on the other future, 
    then "3 5 8"
    NOTE: as of 0.12, this test is not repeatable with the micro-dask-assistant, 
      i.e. you must restart the connected Dask workers between invocations
    This is not so for the micro-assistant, nor for the micro-dask-assistant
get-file-and-directory.sh
    Needs an assistant name as input, e.g. ASSISTANT=micro-assistant-devel
    Run as: ./get-file-and-directory.sh $ASSISTANT | tee test-outputs/get-file-and-directory.out
    Otherwise, similar to the tests/highlevel version
fingertip-deepcell.sh
    Needs an assistant name as input, e.g. ASSISTANT=micro-assistant-devel
    Run as: ./fingertip-deepcell.sh $ASSISTANT | tee test-outputs/fingertip-deepcell.out

headify
    See subdirectory

nesting.sh

manyjobs.sh
    /bin/seamless version of highlevel/imperative-manyjobs.py
    Needs to be run with a Dask cluster, 1000x ~20 sec jobs. 
    Submitting 1000 jobs will take 200s. Will calculate pi to 6 digits. 
    Expected results: 3.141593805644 5.116277454745302e-05 3.141592653589793

cowsay-docker.sh
    Requires Docker image 'cowsay' to be available. Can be built in this directory using:
        docker build -t cowsay . -f cowsay.Dockerfile 
    
cowsay-conda.sh
    Requires conda environment "cowsay-environment" to be present *where the job is executed*.
    Where this is depends on the assistant: it is recommended to use a dask-assistant, 
    the test output has been generated using this.
    Reason: then you control explicitly where the Dask scheduler/worker is being run.
    The conda environment can be built from "cowsay-environment.yml":
        conda env create -n cowsay-environment -f cowsay-environment.yml

pilot.sh
    The relative order of the timings of each run must remain the same.
    Current timings were obtained using the mini-assistant.
    After the run, inspect the assistant log to verify that only four jobs were submitted.
    You can remove the "--local" from the script, in which case six jobs must have been submitted
