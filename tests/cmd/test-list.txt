# In general, run as: i=name_of_test; ./$i.sh > test-outputs/$i.out 2>&1
# Needs delegation to have been set up, unless indicated otherwise
testfolder.sh
undo.sh
    After running, grep "UTC" in undo.out
    It should print two lines, corresponding to dates with a few seconds offset
    If the two lines are identical, something has gone wrong
scratch-fingertip.sh
multi-core-transformations.sh
    The expected result depends on how delegation is set up:
    
    micro-assistant delegation: job 1 fails
    Output: 
    4 seconds have passed
    cat: tf: No such file or directory
    Job 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 4:
    4 seconds have passed
    cat: tf: No such file or directory
    Job 1
    Job 2 2
    (job hangs forever. Might be fixed when Dask will have my patch)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 5:
    8 seconds have passed
    Job 1 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

    micro-dask-assistant, Delegation to a local Dask cluster, --ncores 6:
    4 seconds have passed
    Job 1
    Job 2 2
    Job 1 1
    (3 spurious messages regarding kill usage)

future.sh. Expected output is: 
    Waiting for future 'job1.txt.FUTURE' (2 seconds), 
    then waiting on the other future, 
    then "3 5 8"
get-file-and-directory.sh
    Needs an assistant name as input, e.g. ASSISTANT=micro-assistant-devel
    Run as: ./get-file-and-directory.sh $ASSISTANT | tee test-outputs/get-file-and-directory.out
    Otherwise, similar to the tests/highlevel version

manyjobs.sh
    /bin/seamless version of highlevel/imperative-manyjobs.py
    Needs to be run with a Dask cluster, 1000x ~20 sec jobs. 
    Submitting 1000 jobs will take 200s. Will calculate pi to 6 digits. 
    Expected results: 3.141593805644 5.116277454745302e-05 3.141592653589793
