multi-module: can also be run in interactive mode (see instructions in file)
module-pyaccess: can also be run in interactive mode (mount /tmp/module.py)
bind-status: can also be run in interactive mode, run with "ipython3 -i", make modifications and type "report" and monitor /tmp/graph.json and /tmp/status.json
help: Can also be run interactively with IPython. See the source code for mounts and shares
deepcell-pdb: requires a FAIR server that knows the PDB dataset
                 Can also be run interactively, change ctx.pdb_code 
                  and observe /tmp/pdb_structure.mmcif
deepfolder-pdb: See above . change ctx.pdb_code to "1wej.cif", "1brs.cif" or "7cei.cif" 
                Also, /tmp/pdb_folder will contain 1brs.cif, 1wej.cif and 7cei.cif.

Non-automatic tests
=========================
share-binary-and-unicode.py
    Run with ipython -i
    Open http://localhost:5813/ctx/cow.jpg and http://localhost:5813/ctx/unicode.txt in a browser
    In a terminal, run seamless-http-put http://localhost:5813/ctx/cow.jpg --upload-file cow-rotate.jpg --binary
    The cow should be upside down
    In a terminal, run seamless-http-put http://localhost:5813/ctx/unicode.txt --upload-file unicode.txt
    The unicode text should refresh
add.py:           Run with ipython -i, then change mounts /tmp/a /tmp/b /tmp/c /tmp/code.py
simpler-share.py: Run with ipython -i, then do "curl localhost:5813/ctx/myresult".
                  IPython values printed should be 36 then 39 (Silk); curl should return 39
                  change ctx.a to get 3*a as the result
highlink-cpp.py:  Run with ipython -i, then continue in interactive mode,
                  changing the source code and the schema until it works.
mount.py:         Run with ipython -i, then continue in interactive mode.
                  Initial output is in test-outputs/mount.out
cython_.py        Run with ipython -i                 

imperative-*-async.py: Run with ipython -i -c '%load '$i'.py' and press enter
scratch.sh: make sure that level 3 delegation is available inside a clean buffer directory and database.

observe-graph.ipynb: Run "seamless-jupyter" and then open /cwd in the browser
traitlets.ipynb: same as above
share-subcontext.py: open with seamless-ipython -i, Open in http://localhost:5813/ctx/sub/b
share-pdb.py: open with seamless-ipython -i, Open in http://localhost:5813/ctx/index.html
share-pdb-docker.seamless/.zip: to test using:
      seamless-serve-graph share-pdb-docker.seamless \
      --load-zip share-pdb-docker.zip
    Open in http://localhost:5813/ctx/index.html
    Potentially, add --status-graph
    In that case, open also http://localhost:5813/status/index.html
parse-pdb.py: requires seamless database.
              will fail unless parse-pdb-environment.yml is installed
              can be done when running the test, or afterwards using:
               cs=...  # parse from initial output
               seamless-conda-env-export SOMEDIR
               seamless-conda-env-modify SOMEDIR parse-pdb-environment.yml
               (seamless-conda-env-modify must be run outside the container)
               seamless-conda-env-run-transformation SOMEDIR $cs
plotting.py. Change ctx.plot.period and ctx.plot.npoints.
environment.py
   Can be run automatically in a standard container (with python),
    and will exit at some point because Rust is not installed
    (see test-outputs/environment.out)
  Otherwise, install Rust in the container and then run the test.
  (Rust can be installed with "mamba install rust")
  This will print 29, 34, 34 at the end (see code)
environment2.py
   Can be run automatically in a standard container  (with python),
    and will exit at some point because Go is not installed
    (see test-outputs/environment2.out)
  Otherwise, install Go in the container and then run the test.
  (Go can be installed with "mamba install go-cgo")
  This will print "OK", 2029, 2096 at the end, and then wait for a debugger 
  (not implemented for Go yet)
environment4.py
  This will fail. 
  Install net-tools with apt and 'sympy==1.7.*' with conda/mamba to make it succeed.
environment5.py
  Loads and runs the graph for environment3 and then environment4.
  Should succeed for the former (result: 11.40)
   and fail for the latter.
  Install net-tools with apt and 'sympy==1.7.*' with conda to make it succeed.
environment6.py
  Adding dynamic support for PHP. This will fail. 
  Install php7.4-cli with apt and python-bond with pip to make it succeed.
r.py
  run with ipython
  Third line should be <Silk: 314.3% >
  There should be two plots, in:
   http://localhost:5813/ctx/result.svg
   and
   http://localhost:5813/ctx/result.png
  edit plot.R
  The PNG should update, the SVG should not

environment7.py: This will fail if executed without delegation or with the micro-assistant,
because pytorch is required. Regardless, the transformation checksum is printed out, and
the dunder is written to file. In a standard Seamless environment, 
"run-transformation.py <checksum>" will return an error: 
"ModuleNotFoundError: No module named 'torch'"
In contrast, "run-transformation.py <checksum> environment7-dunder.json" 
will validate the environment and give the same error message as the main script
("Conda package 'pytorch' not installed"). 
Either syntax will succeed inside a proper environment 
(where both Seamless and PyTorch are available).

compute-ctrl-c.py: open with ipython, type "ctx.compute()" and press ctrl+c
delay-direct-print-file: open with ipython, monitor /tmp/direct-print.out, change ctx.tf1.a and ctx.tf1.delay
debugmode-py-light.py
  To debug a simple Python transformer in VSCode. Follow the instructions.
debugmode-compiled-light.py
  To debug a simple C++ transformer in VSCode. Follow the instructions.
debugmode-py-sandbox.py
  Sandbox debugging of a simple Python transformer in VSCode. Follow the instructions.
debugmode-pymodule-light.py
  To debug a Python transformer with Python single-file module in VSCode. Follow the instructions.
debugmode-pymodule-sandbox.py
  Sandbox debugging of a Python transformer with Python single-file module in VSCode. Follow the instructions.
debugmode-pypackage-light.py
  To debug a Python transformer with Python package in VSCode. Follow the instructions.
debugmode-compiledmodule-light.py
  To debug a multi-file C/C++ transformer in VSCode. Follow the instructions.
debugmode-compiled-sandbox.py
  Sandbox debugging of a simple C++ transformer in VSCode. Follow the instructions.
debugmode-compiledmodule-sandbox.py
  Sandbox debugging of a multi-file C/C++ transformer in VSCode. Follow the instructions.
debugmode-py-shell.py  
  Debug IPython shell for a Python transformer. Follow the instructions.
debugmode-bash-shell.py  
  Debug bash shell. Follow the instructions.
debugmode-docker-shell.py  
  Debug bash shell, with Docker image. Follow the instructions.
hack-bash-transformer-translation.py
  Run with IPython and hack /tmp/execute.py
fallback-mount-share.py
  Run with IPython, modify /tmp/a and /tmp/b . 
  This will *not* update ctx.a until you leave fallback mode
  Check "curl localhost:5813/ctx/a"
  Do:
  - fctx.aa = ...
  - ctx.translate(force=True)
  - ctx.a.fallback(None)
  - ctx.a.fallback(fctx.aa)
  - fctx.translate(force=True)
imperative-manyjobs.py
  Needs to be run with a Dask cluster, 1000x ~20 sec jobs. Submitting 1000 jobs may take a few minutes. Will calculate pi to 6 digits. Expected results: 3.141593805644 5.116277454745302e-05 3.141592653589793
multi-core-transformations.py
  It is expected that job 1 finishes before job 2, and job 2 finishes after 7 seconds.
  With DELEGATE, run this with a local Dask cluster with --ncores 5
  Change ncores to 4 to have the first job fail, for a total duration of 2 seconds
  Change ncores to 6 to have both jobs execute in parallel. Job 2 will finish after 2.5 seconds,
   and job 1 will still be running.
slow-buffer.py
  To detect suspected slowness issues with buffer upload, but hasn't given an error yet.