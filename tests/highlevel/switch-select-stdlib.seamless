{
  "__seamless__": "0.11",
  "connections": [
    {
      "source": [
        "a1"
      ],
      "target": [
        "op1",
        "a"
      ],
      "type": "connection"
    },
    {
      "source": [
        "f1"
      ],
      "target": [
        "op1",
        "b"
      ],
      "type": "connection"
    },
    {
      "source": [
        "op1"
      ],
      "target": [
        "r1"
      ],
      "type": "connection"
    },
    {
      "source": [
        "a2"
      ],
      "target": [
        "op2",
        "a"
      ],
      "type": "connection"
    },
    {
      "source": [
        "f2"
      ],
      "target": [
        "op2",
        "b"
      ],
      "type": "connection"
    },
    {
      "source": [
        "op2"
      ],
      "target": [
        "r2"
      ],
      "type": "connection"
    },
    {
      "source": [
        "a3"
      ],
      "target": [
        "op3",
        "a"
      ],
      "type": "connection"
    },
    {
      "source": [
        "f3"
      ],
      "target": [
        "op3",
        "b"
      ],
      "type": "connection"
    },
    {
      "source": [
        "op3"
      ],
      "target": [
        "r3"
      ],
      "type": "connection"
    }
  ],
  "lib": [
    {
      "api": "pyseamless",
      "constructor": "def constructor_select(ctx, libctx, celltype, input, inputs, selected, output):\n    if input is None and inputs is None:\n        raise TypeError(\"You must define 'input' or 'inputs'\")\n    if input is not None and inputs is not None:\n        raise TypeError(\"You must define 'input' or 'inputs', not both\")\n    ctx.output = Cell(celltype)\n    output.connect_from(ctx.output)\n    ctx.selected = Cell(\"str\")\n    selected.connect(ctx.selected)\n\n    # Version 1: a celldict of input cells\n    if inputs is not None: \n        \"\"\"\n        Create one macro input pin per cell in the inputs dict\n        This will populate the ctx passed to select_func with input cells\n        that can be connected to\n        \"\"\"\n        macro1_pins = {\n            \"celltype\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"str\",\n            },\n            \"output\": {\n                \"io\": \"output\", \n                \"celltype\": celltype,\n            },\n            \"selected\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"str\",\n            },\n            \"options\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"plain\",\n            }\n        }\n\n        options = []\n        for input_name in inputs:\n            if not isinstance(input_name, str):\n                input_name = json.loads(json.dumps(input_name))\n            assert isinstance(input_name, str), input_name\n            if input_name in macro1_pins or input_name == \"select_macro1\":\n                msg = \"You cannot select from a cell under the selector '{}'\"\n                raise Exception(msg.format(input_name))\n            options.append(input_name)\n            pin = {\n                \"io\": \"input\",\n                \"celltype\": celltype\n            }\n            macro1_pins[input_name] = pin\n        ctx.select_macro1 = Macro(pins=macro1_pins)\n        ctx.select_macro1.code = libctx.select_code1.value\n        ctx.select_macro1.celltype = celltype\n        ctx.select_macro1.selected = ctx.selected\n        ctx.select_macro1.options = options\n\n        for input_name in inputs:\n            input_cell = Cell(celltype)\n            setattr(ctx, input_name, input_cell)\n            setattr(ctx.select_macro1, input_name, input_cell)\n            inputs[input_name].connect(input_cell)\n\n        ctx.output = ctx.select_macro1.output\n    else:\n        # Version 2: a structured input cell\n        macro2_pins = {\n            \"celltype\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"str\",\n            },\n            \"output\": {\n                \"io\": \"output\", \n                \"celltype\": celltype,\n            },\n            \"input_hash_pattern\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"plain\",\n            },\n            \"input_value\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"plain\",\n            },\n            \"selected\": {\n                \"io\": \"parameter\", \n                \"celltype\": \"str\",\n            }\n        }\n\n        if input.celltype != \"structured\":\n            raise TypeError(\"'input' must be a structured cell\")\n\n        ctx.select_macro2 = Macro(pins=macro2_pins)\n        ctx.select_macro2.code = libctx.select_code2.value\n        ctx.select_macro2.celltype = celltype\n        ctx.input = Cell()        \n        input.connect(ctx.input)\n        if input.hash_pattern is None:\n            ctx.select_macro2.input_value = ctx.input\n            ctx.select_macro2.input_hash_pattern = \"\"  # macro params must be defined!\n        else:\n            ctx.input.hash_pattern = input.hash_pattern\n            ctx.input_checksum = Cell(\"checksum\")\n            ctx.input_checksum = ctx.input\n            ctx.input_deep = Cell(\"plain\")\n            ctx.input_deep = ctx.input_checksum\n            ctx.select_macro2.input_value = ctx.input_deep\n            ctx.select_macro2.input_hash_pattern = input.hash_pattern[\"*\"]\n        ctx.select_macro2.selected = ctx.selected\n\n        ctx.output = ctx.select_macro2.output",
      "graph": {
        "__seamless__": "0.11",
        "connections": [],
        "lib": [],
        "nodes": [
          {
            "path": [
              "HELP"
            ],
            "type": "context"
          },
          {
            "celltype": "text",
            "checksum": {
              "value": "9d68e693e5ccf2998d0e82585825683f34fb4dc74b4336f249bfa3279e02ea53"
            },
            "datatype": "mixed",
            "file_extension": "md",
            "hash_pattern": null,
            "mimetype": "text/markdown",
            "path": [
              "HELP",
              "INDEX"
            ],
            "type": "cell"
          },
          {
            "celltype": "code",
            "checksum": {
              "value": "cd407606181d9b11f8db3ac609f877e5c300f1342b47193adbc1cd6941adc9d8"
            },
            "datatype": "mixed",
            "language": "python",
            "path": [
              "constructor_code"
            ],
            "type": "cell"
          },
          {
            "celltype": "structured",
            "checksum": {
              "auth": "d21c1e13d479e4510e33420fbb7fdf872afafb49f2890ef931f330898c33d4e2",
              "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
              "value": "d21c1e13d479e4510e33420fbb7fdf872afafb49f2890ef931f330898c33d4e2"
            },
            "datatype": "mixed",
            "hash_pattern": null,
            "path": [
              "constructor_params"
            ],
            "type": "cell"
          },
          {
            "celltype": "code",
            "checksum": {
              "value": "006a307ffa96fd14b48139d22eaaf19c4233b0f1667f82586c062024cbe0e730"
            },
            "datatype": "mixed",
            "language": "python",
            "path": [
              "select_code1"
            ],
            "type": "cell"
          },
          {
            "celltype": "code",
            "checksum": {
              "value": "b5d5368e7a41f086fcd85197ccfbc04b67ee53f0cd84304df8980720f542d724"
            },
            "datatype": "mixed",
            "language": "python",
            "path": [
              "select_code2"
            ],
            "type": "cell"
          }
        ],
        "params": {
          "share_namespace": "ctx"
        }
      },
      "language": "python",
      "params": {
        "celltype": {
          "default": null,
          "io": "input",
          "type": "value"
        },
        "input": {
          "default": null,
          "io": "input",
          "must_be_defined": false,
          "type": "cell"
        },
        "inputs": {
          "default": null,
          "io": "input",
          "must_be_defined": false,
          "type": "celldict"
        },
        "output": {
          "default": null,
          "io": "output",
          "type": "cell"
        },
        "selected": {
          "default": null,
          "io": "input",
          "type": "cell"
        }
      },
      "path": [
        "select"
      ]
    },
    {
      "api": "pyseamless",
      "constructor": "def constructor_switch(ctx, libctx, celltype, input, selected, outputs):\n    import json\n    ctx.input = Cell(celltype)\n    input.connect(ctx.input)\n    ctx.selected = Cell(\"str\")\n    selected.connect(ctx.selected)\n\n    macro_pins = {\n        \"celltype\": {\n            \"io\": \"parameter\", \n            \"celltype\": \"str\",\n        },\n        \"input\": {\n            \"io\": \"input\", \n            \"celltype\": celltype,\n        },\n        \"selected\": {\n            \"io\": \"parameter\", \n            \"celltype\": \"str\",\n        },\n        \"options\": {\n            \"io\": \"parameter\", \n            \"celltype\": \"plain\",\n        }\n    }\n\n    \"\"\"\n    Create one macro output pin per cell in the outputs dict\n    This will populate the ctx passed to switch_func with output cells\n     that can be connected to\n    \"\"\"\n    options = []\n    for output_name in outputs:\n        if not isinstance(output_name, str):\n            output_name = json.loads(json.dumps(output_name))\n        assert isinstance(output_name, str), output_name\n        if output_name in macro_pins or output_name == \"switch_macro\":\n            msg = \"You cannot switch to a cell under the selector '{}'\"\n            raise Exception(msg.format(output_name))\n        options.append(output_name)\n        pin = {\n            \"io\": \"output\",\n            \"celltype\": celltype\n        }\n        macro_pins[output_name] = pin\n    ctx.switch_macro = Macro(pins=macro_pins)\n    ctx.switch_macro.code = libctx.switch_code.value\n    ctx.switch_macro.celltype = celltype\n    ctx.switch_macro.input = ctx.input\n    ctx.switch_macro.selected = ctx.selected\n    ctx.switch_macro.options = options\n\n    for output_name in outputs:\n        macro_pin = getattr(ctx.switch_macro, output_name)\n        output_cell = Cell(celltype)\n        setattr(ctx, output_name, output_cell)\n        setattr(ctx, output_name, macro_pin)\n        outputs[output_name].connect_from(output_cell)",
      "graph": {
        "__seamless__": "0.11",
        "connections": [],
        "lib": [],
        "nodes": [
          {
            "path": [
              "HELP"
            ],
            "type": "context"
          },
          {
            "celltype": "text",
            "checksum": {
              "value": "31600e2be7ebd0142981d995167d44def799457cd9475c159ee9ee11b044c58d"
            },
            "datatype": "mixed",
            "file_extension": "md",
            "hash_pattern": null,
            "mimetype": "text/markdown",
            "path": [
              "HELP",
              "INDEX"
            ],
            "type": "cell"
          },
          {
            "celltype": "code",
            "checksum": {
              "value": "4be480df11bb793a28839d93430070b194d371c2326aa1329453eb6d936caaa6"
            },
            "datatype": "mixed",
            "language": "python",
            "path": [
              "constructor_code"
            ],
            "type": "cell"
          },
          {
            "celltype": "structured",
            "checksum": {
              "auth": "46de9824d3fa745d4294cfba05eba4216673a974848778f4848effb3ba91777d",
              "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
              "value": "46de9824d3fa745d4294cfba05eba4216673a974848778f4848effb3ba91777d"
            },
            "datatype": "mixed",
            "hash_pattern": null,
            "path": [
              "constructor_params"
            ],
            "type": "cell"
          },
          {
            "celltype": "code",
            "checksum": {
              "value": "5c4ea566d4681863cde9cc32df96a6b80dd89179dfa5c90447ca8f501052eb88"
            },
            "datatype": "mixed",
            "language": "python",
            "path": [
              "switch_code"
            ],
            "type": "cell"
          }
        ],
        "params": {
          "share_namespace": "ctx"
        }
      },
      "language": "python",
      "params": {
        "celltype": {
          "default": null,
          "io": "input",
          "type": "value"
        },
        "input": {
          "default": null,
          "io": "input",
          "type": "cell"
        },
        "outputs": {
          "default": null,
          "io": "output",
          "type": "celldict"
        },
        "selected": {
          "default": null,
          "io": "input",
          "type": "cell"
        }
      },
      "path": [
        "switch"
      ]
    }
  ],
  "nodes": [
    {
      "celltype": "structured",
      "checksum": {
        "auth": "4fe9376824bc1528486e8fc63a93f677e1172bcf21e05b257677f11e68805c56",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "4fe9376824bc1528486e8fc63a93f677e1172bcf21e05b257677f11e68805c56"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "a"
      ],
      "type": "cell"
    },
    {
      "celltype": "float",
      "checksum": {},
      "datatype": "mixed",
      "path": [
        "a1"
      ],
      "type": "cell"
    },
    {
      "celltype": "float",
      "checksum": {},
      "datatype": "mixed",
      "path": [
        "a2"
      ],
      "type": "cell"
    },
    {
      "celltype": "float",
      "checksum": {
        "value": "4fe9376824bc1528486e8fc63a93f677e1172bcf21e05b257677f11e68805c56"
      },
      "datatype": "mixed",
      "path": [
        "a3"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "auth": "8680a668f33ed1ed9d177cb473af2e2774f8cdeb036b12d559070d5041cc60c4",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "8680a668f33ed1ed9d177cb473af2e2774f8cdeb036b12d559070d5041cc60c4"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "f1"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "auth": "6f1e21084c21cb95ea6d17d3f5d2aff5d92965b6c8702b49e28990894bc7859c",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "6f1e21084c21cb95ea6d17d3f5d2aff5d92965b6c8702b49e28990894bc7859c"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "f2"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "auth": "39dacbda510b82b6fec0680fb7beb110eef660f5daef6c129ef1abfde1d4d331",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "39dacbda510b82b6fec0680fb7beb110eef660f5daef6c129ef1abfde1d4d331"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "f3"
      ],
      "type": "cell"
    },
    {
      "INPUT": "inp",
      "RESULT": "result",
      "SCHEMA": null,
      "checksum": {
        "code": "2002be927da6ae70b329f1be3057cd4a354e986d49eff721e1405168479129ea",
        "input": "d3c96e7441c4999769b5e3767c35374ad93277bb5694d42abb075f21031d715e",
        "result": "d861fc9d20c465ff20d76269a155be799dd70f9d27475b04082e41680cda2a00",
        "result_schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c"
      },
      "compiled": false,
      "hash_pattern": {
        "*": "#"
      },
      "language": "python",
      "path": [
        "op1"
      ],
      "pins": {
        "a": {
          "celltype": "default"
        },
        "b": {
          "celltype": "default"
        }
      },
      "type": "transformer"
    },
    {
      "INPUT": "inp",
      "RESULT": "result",
      "SCHEMA": null,
      "checksum": {
        "code": "e952b7ea7b42e2a863a10b62fe7a126d07d95e41d24a578a5daa836e6d7370b0",
        "input": "8639f8dd5f88761ff142550f083ab24a3c475ae9e1bfa2875cf7b4a719b6cd91",
        "result": "cbc41cf05d17514a899d8a263394b9193d65b6466103e5c37dc57f28a88f2544",
        "result_schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c"
      },
      "compiled": false,
      "hash_pattern": {
        "*": "#"
      },
      "language": "python",
      "path": [
        "op2"
      ],
      "pins": {
        "a": {
          "celltype": "default"
        },
        "b": {
          "celltype": "default"
        }
      },
      "type": "transformer"
    },
    {
      "INPUT": "inp",
      "RESULT": "result",
      "SCHEMA": null,
      "checksum": {
        "code": "f62aca8f3b185ad1829fe847f4faac5517a83e352dfb21bc81376672cca564af",
        "input": "85b39793c1f0bb975386c9ed0687031f55b72cd8eb404b834d02920729c63b4e",
        "result": "5a8c475b7188e372b9d838a6aae919d4cf0fd299f3173999babe60544b300812",
        "result_schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c"
      },
      "compiled": false,
      "hash_pattern": {
        "*": "#"
      },
      "language": "python",
      "path": [
        "op3"
      ],
      "pins": {
        "a": {
          "celltype": "default"
        },
        "b": {
          "celltype": "default"
        }
      },
      "type": "transformer"
    },
    {
      "celltype": "float",
      "checksum": {
        "value": "5a8c475b7188e372b9d838a6aae919d4cf0fd299f3173999babe60544b300812"
      },
      "datatype": "mixed",
      "path": [
        "output"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "d861fc9d20c465ff20d76269a155be799dd70f9d27475b04082e41680cda2a00"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "r1"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "value": "cbc41cf05d17514a899d8a263394b9193d65b6466103e5c37dc57f28a88f2544"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "r2"
      ],
      "type": "cell"
    },
    {
      "celltype": "structured",
      "checksum": {
        "value": "5a8c475b7188e372b9d838a6aae919d4cf0fd299f3173999babe60544b300812"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "r3"
      ],
      "type": "cell"
    },
    {
      "arguments": {
        "celltype": "float",
        "inputs": {
          "path1": [
            "r1"
          ],
          "path2": [
            "r2"
          ],
          "path3": [
            "r3"
          ]
        },
        "output": [
          "output"
        ],
        "selected": [
          "selected"
        ]
      },
      "libpath": [
        "select"
      ],
      "path": [
        "select"
      ],
      "type": "libinstance"
    },
    {
      "celltype": "structured",
      "checksum": {
        "auth": "4f32c876b37262b510060f74309c299d40f188a7650c66c768bddf84acc2f780",
        "schema": "d0a1b2af1705c1b8495b00145082ef7470384e62ac1c4d9b9cdbbe0476c28f8c",
        "value": "4f32c876b37262b510060f74309c299d40f188a7650c66c768bddf84acc2f780"
      },
      "datatype": "mixed",
      "hash_pattern": null,
      "path": [
        "selected"
      ],
      "type": "cell"
    },
    {
      "arguments": {
        "celltype": "float",
        "input": [
          "a"
        ],
        "outputs": {
          "path1": [
            "a1"
          ],
          "path2": [
            "a2"
          ],
          "path3": [
            "a3"
          ]
        },
        "selected": [
          "selected"
        ]
      },
      "libpath": [
        "switch"
      ],
      "path": [
        "switch"
      ],
      "type": "libinstance"
    }
  ],
  "params": {
    "share_namespace": "ctx"
  }
}