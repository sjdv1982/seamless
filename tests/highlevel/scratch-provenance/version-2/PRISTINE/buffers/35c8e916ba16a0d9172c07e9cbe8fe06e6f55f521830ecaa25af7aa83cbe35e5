Module(body=[ImportFrom(module='seamless.core.transformation', names=[alias(name='SeamlessStreamTransformationError'), alias(name='SeamlessTransformationError')], level=0), ImportFrom(module='silk', names=[alias(name='Silk')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='operator'), alias(name='functools')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='wurlitzer')]), Assign(targets=[Name(id='ffi', ctx=Store())], value=Attribute(value=Name(id='module', ctx=Load()), attr='ffi', ctx=Load())), Try(body=[Expr(value=Name(id='SPECIAL__DIRECT_PRINT', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[Assign(targets=[Name(id='SPECIAL__DIRECT_PRINT', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='ARRAYS', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='FFI_OBJS', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='get_dtype', args=arguments(posonlyargs=[], args=[arg(arg='type'), arg(arg='unsigned'), arg(arg='bytesize')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='string')]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dtype', ctx=Load()), args=[Constant(value='S1')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='integer')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='=')), If(test=Name(id='unsigned', ctx=Load()), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value='u'))], orelse=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value='i'))]), If(test=Compare(left=Name(id='bytesize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='bytesize', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='number')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='=')), AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value='f')), If(test=Compare(left=Name(id='bytesize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='bytesize', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[]))])]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dtype', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='json_to_c', ctx=Store())], value=Dict(keys=[Constant(value='integer'), Tuple(elts=[Constant(value='integer'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='integer'), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value='integer'), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value='integer'), Constant(value=8)], ctx=Load()), Constant(value='number'), Tuple(elts=[Constant(value='number'), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value='number'), Constant(value=8)], ctx=Load()), Constant(value='boolean'), Constant(value='string')], values=[Constant(value='int'), Constant(value='int8_t'), Constant(value='int16_t'), Constant(value='int32_t'), Constant(value='int64_t'), Constant(value='double'), Constant(value='float'), Constant(value='double'), Constant(value='bool'), Constant(value='char')])), FunctionDef(name='get_maxshape', args=arguments(posonlyargs=[], args=[arg(arg='shape')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='maxshape', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Name(id='shape', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Name(id='item', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), msg=Name(id='shape', ctx=Load())), If(test=Compare(left=Name(id='item', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='SeamlessTransformationError', ctx=Load()), args=[Constant(value='Cannot use -1 in result shape. A positive value must be given. To indicate a maximum value, specify a list [0, max]')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='item', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='SeamlessTransformationError', ctx=Load()), args=[Constant(value='Result shape values must be positive. To indicate a maximum value, specify a list [0, max]')], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='maxshape', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='maxshape', ctx=Load()))], decorator_list=[]), FunctionDef(name='gen_basic_type', args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='warnings', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='has_form', ctx=Store())], value=Compare(left=Constant(value='form'), ops=[In()], comparators=[Name(id='schema', ctx=Load())])), If(test=Name(id='has_form', ctx=Load()), body=[Assign(targets=[Name(id='form', ctx=Store())], value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='form'), ctx=Load()))], orelse=[Assign(targets=[Name(id='form', ctx=Store())], value=Dict(keys=[], values=[]))]), Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='type'), ctx=Load())), Assign(targets=[Name(id='ctype', ctx=Store())], value=Subscript(value=Name(id='json_to_c', ctx=Load()), slice=Name(id='type', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='ctype', ctx=Load())), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='integer'), Constant(value='number')], ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='has_form', ctx=Load())), Compare(left=Constant(value='bytesize'), ops=[NotIn()], comparators=[Name(id='form', ctx=Load())])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='ctype', ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='json_to_c', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Subscript(value=Name(id='form', ctx=Load()), slice=Constant(value='bytesize'), ctx=Load())], ctx=Load()), ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='integer')]), body=[If(test=Call(func=Attribute(value=Name(id='form', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unsigned')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='_t')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Constant(value='u'), op=Add(), right=Name(id='result', ctx=Load())))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Constant(value='unsigned '), op=Add(), right=Name(id='result', ctx=Load())))])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='gen_struct_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='capitalize', args=arguments(posonlyargs=[], args=[arg(arg='subname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='subsubname', ctx=Load()), attr='capitalize', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='subsubname', ctx=Store()), iter=Call(func=Attribute(value=Name(id='subname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_')], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Tuple(elts=[Name(id='name', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='capitalize', ctx=Load()), args=[Name(id='subname', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='subname', ctx=Store()), iter=Name(id='name', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value='Struct')))], decorator_list=[]), FunctionDef(name='build_array_struct', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='arr'), arg(arg='with_strides')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='array_struct_name', ctx=Store())], value=Call(func=Name(id='gen_struct_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arr', ctx=Load()), Name(id='Silk', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='arr', ctx=Store())], value=Attribute(value=Name(id='arr', ctx=Load()), attr='data', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ptr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='from_buffer', ctx=Load()), args=[Name(id='arr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='array_struct', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='new', ctx=Load()), args=[BinOp(left=Name(id='array_struct_name', ctx=Load()), op=Add(), right=Constant(value=' *'))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='arr', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Attribute(value=Name(id='arr', ctx=Load()), attr='nbytes', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='arr', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arr', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(), ctx=Load()))]), If(test=Name(id='with_strides', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='array_struct', ctx=Load()), attr='strides', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='arr', ctx=Load()), attr='strides', ctx=Load())], keywords=[])), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arr', ctx=Load()), attr='strides', ctx=Load()), slice=Slice(), ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='array_struct', ctx=Load()), attr='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='typeof', ctx=Load()), args=[Attribute(value=Name(id='array_struct', ctx=Load()), attr='data', ctx=Load())], keywords=[]), Name(id='ptr', ctx=Load())], keywords=[])), Return(value=Name(id='array_struct', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_result_array_struct', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='array_struct_name', ctx=Store())], value=Call(func=Name(id='gen_struct_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='shape', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='shape'), ctx=Load())), Assign(targets=[Name(id='maxshape', ctx=Store())], value=Call(func=Name(id='get_maxshape', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='unsigned', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unsigned'), Constant(value=False)], keywords=[])), Assign(targets=[Name(id='bytesize', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='bytesize')], keywords=[])), Assign(targets=[Name(id='dtype', ctx=Store())], value=Call(func=Name(id='get_dtype', ctx=Load()), args=[Name(id='type', ctx=Load()), Name(id='unsigned', ctx=Load()), Name(id='bytesize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='array_struct', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='new', ctx=Load()), args=[BinOp(left=Name(id='array_struct_name', ctx=Load()), op=Add(), right=Constant(value=' *'))], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), ctx=Store())], value=Subscript(value=Name(id='shape', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='arr', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Name(id='maxshape', ctx=Load())), keyword(arg='dtype', value=Name(id='dtype', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ARRAYS', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='arr_ptr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='from_buffer', ctx=Load()), args=[Name(id='arr', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='array_struct', ctx=Load()), attr='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='typeof', ctx=Load()), args=[Attribute(value=Name(id='array_struct', ctx=Load()), attr='data', ctx=Load())], keywords=[]), Name(id='arr_ptr', ctx=Load())], keywords=[])), Return(value=Name(id='array_struct', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_result_struct', args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['result_struct']), Assign(targets=[Name(id='result_struct_name', ctx=Store())], value=Call(func=Name(id='gen_struct_name', ctx=Load()), args=[Name(id='result_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result_struct', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='new', ctx=Load()), args=[BinOp(left=Name(id='result_struct_name', ctx=Load()), op=Add(), right=Constant(value=' *'))], keywords=[])), Assign(targets=[Name(id='props', ctx=Store())], value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='properties'), ctx=Load())), For(target=Tuple(elts=[Name(id='propname', ctx=Store()), Name(id='propschema', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='props', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='proptype', ctx=Store())], value=Subscript(value=Name(id='propschema', ctx=Load()), slice=Constant(value='type'), ctx=Load())), If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='array')]), body=[Assign(targets=[Name(id='full_propname', ctx=Store())], value=Tuple(elts=[Name(id='result_name', ctx=Load()), Name(id='propname', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='form', ctx=Store())], value=Call(func=Attribute(value=Name(id='propschema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='form'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='result_array_struct', ctx=Store())], value=Call(func=Name(id='build_result_array_struct', ctx=Load()), args=[Name(id='full_propname', ctx=Load()), Name(id='propschema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FFI_OBJS', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='result_array_struct', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='result_struct', ctx=Load()), Name(id='propname', ctx=Load()), Name(id='result_array_struct', ctx=Load())], keywords=[]))], orelse=[Pass()])])], orelse=[]), Return(value=Name(id='result_struct', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_result_array', args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['result_struct']), Assign(targets=[Name(id='result_struct_name', ctx=Store())], value=Call(func=Name(id='gen_struct_name', ctx=Load()), args=[Name(id='result_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='shape', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='shape'), ctx=Load())), Assign(targets=[Name(id='maxshape', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='get_maxshape', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='dim', ctx=Store()), iter=Name(id='maxshape', ctx=Load()), body=[If(test=Compare(left=Name(id='dim', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='SeamlessTransformationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Result shape {} contains non-positive numbers'), attr='format', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='unsigned', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unsigned'), Constant(value=False)], keywords=[])), Assign(targets=[Name(id='bytesize', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='bytesize')], keywords=[])), Assign(targets=[Name(id='dtype', ctx=Store())], value=Call(func=Name(id='get_dtype', ctx=Load()), args=[Name(id='type', ctx=Load()), Name(id='unsigned', ctx=Load()), Name(id='bytesize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result_struct', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='new', ctx=Load()), args=[BinOp(left=Name(id='result_struct_name', ctx=Load()), op=Add(), right=Constant(value=' *'))], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_struct', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), ctx=Store())], value=Subscript(value=Name(id='maxshape', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='arr', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Name(id='maxshape', ctx=Load())), keyword(arg='dtype', value=Name(id='dtype', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ARRAYS', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='arr_ptr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='from_buffer', ctx=Load()), args=[Name(id='arr', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result_struct', ctx=Load()), attr='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='typeof', ctx=Load()), args=[Attribute(value=Name(id='result_struct', ctx=Load()), attr='data', ctx=Load())], keywords=[]), Name(id='arr_ptr', ctx=Load())], keywords=[])), Return(value=Name(id='result_struct', ctx=Load()))], decorator_list=[]), FunctionDef(name='unpack_result_array_struct', args=arguments(posonlyargs=[], args=[arg(arg='array_struct'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='')), Assign(targets=[Name(id='shape', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='shape'), ctx=Load())), Assign(targets=[Name(id='maxshape', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='get_maxshape', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), slice=Constant(value='type'), ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='unsigned', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unsigned'), Constant(value=False)], keywords=[])), Assign(targets=[Name(id='bytesize', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Constant(value='form'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='bytesize')], keywords=[])), Assign(targets=[Name(id='dtype', ctx=Store())], value=Call(func=Name(id='get_dtype', ctx=Load()), args=[Name(id='type', ctx=Load()), Name(id='unsigned', ctx=Load()), Name(id='bytesize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nbytes', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='reduce', ctx=Load()), args=[Attribute(value=Name(id='operator', ctx=Load()), attr='mul', ctx=Load()), Name(id='maxshape', ctx=Load()), Constant(value=1)], keywords=[]), op=Mult(), right=Attribute(value=Name(id='dtype', ctx=Load()), attr='itemsize', ctx=Load()))), Expr(value=Constant(value='\n    buf = ffi.buffer(array_struct.data, nbytes)\n    arr = np.frombuffer(buf,dtype=dtype).reshape(shape)\n    # In theory, no copy needs to be made, but in practice, still...\n    arr = arr.copy()\n    ')), Assign(targets=[Name(id='arr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ARRAYS', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='arr', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Name(id='dtype', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='arr', ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Name(id='maxshape', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='arr', ctx=Load()), attr='nbytes', ctx=Load()), ops=[Eq()], comparators=[Name(id='nbytes', ctx=Load())])), If(test=Compare(left=Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Name(id='maxshape', ctx=Load())]), body=[Return(value=Name(id='arr', ctx=Load()))], orelse=[Assign(targets=[Name(id='slices', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='slice', ctx=Load()), args=[Constant(value=0), Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='array_struct', ctx=Load()), attr='shape', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='sub', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='arr', ctx=Load()), slice=Name(id='slices', ctx=Load()), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='sub', ctx=Load()))])], decorator_list=[]), FunctionDef(name='unpack_result_struct', args=arguments(posonlyargs=[], args=[arg(arg='result_struct'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result_dict', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='props', ctx=Store())], value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='properties'), ctx=Load())), For(target=Tuple(elts=[Name(id='propname', ctx=Store()), Name(id='propschema', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='props', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='proptype', ctx=Store())], value=Subscript(value=Name(id='propschema', ctx=Load()), slice=Constant(value='type'), ctx=Load())), If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='array')]), body=[Assign(targets=[Name(id='result_array_struct', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='result_struct', ctx=Load()), Name(id='propname', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result_dict', ctx=Load()), slice=Name(id='propname', ctx=Load()), ctx=Store())], value=Call(func=Name(id='unpack_result_array_struct', ctx=Load()), args=[Name(id='result_array_struct', ctx=Load()), Name(id='propschema', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='result_dict', ctx=Load()), slice=Name(id='propname', ctx=Load()), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='result_struct', ctx=Load()), Name(id='propname', ctx=Load())], keywords=[]))])])], orelse=[]), Return(value=Name(id='result_dict', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='input_pins', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='pins', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='vv', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Name(id='v', ctx=Load()), orelse=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value='io'), ctx=Load()))), If(test=Compare(left=Name(id='vv', ctx=Load()), ops=[Eq()], comparators=[Constant(value='input')]), body=[Expr(value=Call(func=Attribute(value=Name(id='input_pins', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='input_schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')])), Assign(targets=[Name(id='input_props', ctx=Store())], value=Subscript(value=Name(id='input_schema', ctx=Load()), slice=Constant(value='properties'), ctx=Load())), For(target=Name(id='pin', ctx=Store()), iter=Name(id='input_pins', ctx=Load()), body=[If(test=Compare(left=Name(id='pin', ctx=Load()), ops=[NotIn()], comparators=[Name(id='input_props', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='SeamlessTransformationError', ctx=Load()), args=[BinOp(left=Constant(value='Missing schema for input pin .%s'), op=Mod(), right=Name(id='pin', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='input_schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='order'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='prop', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='input_props', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prop', ctx=Load()), ops=[NotIn()], comparators=[Name(id='order', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='prop', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='propnr', ctx=Store()), Name(id='prop', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='prop', ctx=Load()), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='SeamlessTransformationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="required property '{}' missing or undefined"), attr='format', ctx=Load()), args=[Name(id='prop', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='prop', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='propschema', ctx=Store())], value=Subscript(value=Name(id='input_props', ctx=Load()), slice=Name(id='prop', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='proptype', ctx=Store())], value=Subscript(value=Name(id='propschema', ctx=Load()), slice=Constant(value='type'), ctx=Load())), If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='proptype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='array')]), body=[Assign(targets=[Name(id='form', ctx=Store())], value=Call(func=Attribute(value=Name(id='propschema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='form'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='with_strides', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='contiguous'), ops=[NotIn()], comparators=[Name(id='form', ctx=Load())]), UnaryOp(op=Not(), operand=Subscript(value=Name(id='form', ctx=Load()), slice=Constant(value='contiguous'), ctx=Load()))])), Assign(targets=[Name(id='array_struct', ctx=Store())], value=Call(func=Name(id='build_array_struct', ctx=Load()), args=[Name(id='prop', ctx=Load()), Name(id='value', ctx=Load()), Name(id='with_strides', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='array_struct', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='result_schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')]), body=[Assign(targets=[Name(id='result_arg', ctx=Store())], value=Call(func=Name(id='build_result_struct', ctx=Load()), args=[Name(id='result_schema', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='result_schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='array')]), body=[Assign(targets=[Name(id='result_arg', ctx=Store())], value=Call(func=Name(id='build_result_array', ctx=Load()), args=[Name(id='result_schema', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result_arg_name', ctx=Store())], value=Call(func=Name(id='gen_basic_type', ctx=Load()), args=[Name(id='result_schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result_arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='ffi', ctx=Load()), attr='new', ctx=Load()), args=[BinOp(left=Name(id='result_arg_name', ctx=Load()), op=Add(), right=Constant(value=' *'))], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='result_arg', ctx=Load())], keywords=[])), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error_code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='module', ctx=Load()), attr='lib', ctx=Load()), attr='transform', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='error_code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Return(value=Tuple(elts=[Name(id='error_code', ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='result_schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='object')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='unpack_result_struct', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Name(id='result_schema', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='result_schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='array')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='unpack_result_array_struct', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Name(id='result_schema', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()))])]), Return(value=Tuple(elts=[Constant(value=0), Name(id='result', ctx=Load())], ctx=Load()))], decorator_list=[]), If(test=Name(id='SPECIAL__DIRECT_PRINT', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='error_code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='run', ctx=Load()), args=[], keywords=[]))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='wurlitzer', ctx=Load()), attr='pipes', ctx=Load()), args=[], keywords=[]), optional_vars=Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store()))], body=[Assign(targets=[Tuple(elts=[Name(id='error_code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='run', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='ARRAYS', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='error_code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='SeamlessStreamTransformationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Compiled transformer returned non-zero value: {}'), attr='format', ctx=Load()), args=[Name(id='error_code', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], type_ignores=[])